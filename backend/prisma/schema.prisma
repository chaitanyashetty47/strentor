// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  TUTOR
}

model Users {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  supabaseId  String   @unique
  role        Role     @default(USER)
  createdCourses Course[] @relation("CreatedCourses")
  purchasedCourses UsersPurchases[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  certificate Certificate[]
}

model Course {
  id              Int             @id @default(autoincrement())
  title           String
  imageUrl        String
  description     String
  openToEveryone  Boolean         @default(false)
  slug            String          @unique
  discordOauthUrl String          @default("")
  content         CourseContent[]
  purchasedBy     UsersPurchases[]
  certificate     Certificate[]
  certIssued      Boolean         @default(false)
  createdBy       Users            @relation("CreatedCourses", fields: [createdById], references: [id])
  createdById     Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Content {
  id               Int             @id @default(autoincrement())
  type             String          @default("folder")
  title            String
  hidden           Boolean         @default(false)
  description      String?
  thumbnail        String?
  parentId         Int?
  parent           Content?        @relation("ContentToContent", fields: [parentId], references: [id])
  children         Content[]       @relation("ContentToContent")
  courses          CourseContent[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model CourseContent {
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  content   Content @relation(fields: [contentId], references: [id])
  contentId Int

  @@id([courseId, contentId])
}

model UsersPurchases {
  Users      Users    @relation(fields: [UsersId], references: [id])
  UsersId    Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  purchasedAt DateTime @default(now())

  @@id([UsersId, courseId])
}

model Certificate {
  id        Int      @id @default(autoincrement())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  Users      Users     @relation(fields: [UsersId], references: [id])
  UsersId    Int
  issuedAt  DateTime @default(now())
}