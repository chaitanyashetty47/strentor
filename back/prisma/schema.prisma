generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id               Int              @id @default(autoincrement())
  name             String
  email            String           @unique
  supabaseId       String           @unique
  avatarUrl        String?
  bio              String?
  aboutMe          String?
  role             Role             @default(USER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  certificate      Certificate[]
  createdCourses   Course[]         @relation("CreatedCourses")
  Review           Review[]
  purchasedCourses UsersPurchases[]
}

model Course {
  id              Int              @id @default(autoincrement())
  title           String
  imageUrl        String
  description     String
  openToEveryone  Boolean          @default(false)
  slug            String           @unique
  discordOauthUrl String           @default("")
  certIssued      Boolean          @default(false)
  createdById     Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  certificate     Certificate[]
  createdBy       Users            @relation("CreatedCourses", fields: [createdById], references: [id])
  content         CourseContent[]
  Review          Review[]
  purchasedBy     UsersPurchases[]
}

model Content {
  id               Int             @id @default(autoincrement())
  type             String          @default("folder")
  title            String
  hidden           Boolean         @default(false)
  description      String?
  thumbnail        String?
  parentId         Int?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  notionMetadataId Int?
  parent           Content?        @relation("ContentToContent", fields: [parentId], references: [id])
  children         Content[]       @relation("ContentToContent")
  courses          CourseContent[]
}

model CourseContent {
  courseId  Int
  contentId Int
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([courseId, contentId])
}

model UsersPurchases {
  UsersId     Int
  courseId    Int
  purchasedAt DateTime @default(now())
  Users       Users    @relation(fields: [UsersId], references: [id])
  course      Course   @relation(fields: [courseId], references: [id])

  @@id([UsersId, courseId])
}

model Certificate {
  id       Int      @id @default(autoincrement())
  courseId Int
  issuedAt DateTime @default(now())
  UsersId  Int
  Users    Users    @relation(fields: [UsersId], references: [id])
  course   Course   @relation(fields: [courseId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  Course    Course   @relation(fields: [courseId], references: [id])
  Users     Users    @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
  TUTOR
}
